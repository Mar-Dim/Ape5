/*
 * generated by Xtext 2.38.0
 */
package guiaApe5.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import guiaApe5.Sistema
import guiaApe5.TipoDato
import guiaApe5.Contenedor


class GuiaApe5Generator extends AbstractGenerator {

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
	for(s :resource.allContents.toIterable.filter(Sistema)){
			fsa.generateFile("frontend/App.jsx", generateAppReact(s))
			fsa.generateFile("frontend/main.jsx",generateMain(s))
			fsa.generateFile("frontend/index.html",generateHTML(s))
			fsa.generateFile("frontend/vite.config.js",generateViteConfig(s))
			fsa.generateFile("frontend/package.json", generatePackageJsonFrontend)
			fsa.generateFile(s.name+".sql",genSQL(s))
			fsa.generateFile("backend/main.ts", generateMainNest)
			fsa.generateFile("backend/app.module.ts", generateAppModule(s))
			fsa.generateFile("backend/package.json", generatePackageJsonNest)
			fsa.generateFile("backend/tsconfig.json", generateTsConfigBackend)
			
			for (c:s.contiene){
				if(!c.esVisual){
				fsa.generateFile("backend/entities/"+c.name+".entity.ts",getEntity(c))
				fsa.generateFile("backend/controllers/"+c.name+".controller.ts",getController(c))
				fsa.generateFile("backend/modules/"+c.name+".module.ts",getModule(c))
				fsa.generateFile("backend/modules/"+c.name+".service.ts",getService(c))
				}
				else{
					fsa.generateFile("frontend/components/"+c.name+".jsx",generateReact(c))
					fsa.generateFile("frontend/"+c.name+".css",generateCSS(c))
				}
			}
		}
	}
	


	
	def genSQL(Sistema s) {
  '''
  CREATE DATABASE Â«s.nameÂ»;
  USE Â«s.nameÂ»;


  Â«FOR cont : s.contieneÂ»

  CREATE TABLE Â«cont.nameÂ» (
    Â«FOR elem : cont.poseeÂ»
      Â«elem.nameÂ» Â«getTipoSQL(elem.tipoDato)Â»Â«IF elem.isPrimaryÂ» PRIMARY KEYÂ«ENDIFÂ»,
    Â«ENDFORÂ»
    Â«IF !cont.relaciona.emptyÂ»
      Â«FOR rel : cont.relacionaÂ»
        FOREIGN KEY (id_Â«rel.nameÂ») REFERENCES Â«rel.nameÂ»(id),
      Â«ENDFORÂ»
    Â«ENDIFÂ»


  Â«ENDFORÂ»
  '''
}
	
def getTipoSQL(TipoDato tipo) {
	  if (tipo === null) return 'TEXT'
	
	  switch tipo.literal {
	    case 'String': 'VARCHAR(255)'
	    case 'int': 'INT'
	    case 'boolean': 'BOOLEAN'
	    case 'double': 'DOUBLE'
	    default: 'TEXT'
	  }
}

def generateAppReact(Sistema s) {
  '''
  import React from 'react';
  import ReactDOM from 'react-dom/client';
  Â«FOR c : s.contiene.filter[esVisual]Â»
  import Â«c.name.toFirstUpperÂ»Form from './componentsÂ«c.nameÂ».jsx';
  import './Â«c.nameÂ».css';
  Â«ENDFORÂ»

  function App() {
    return (
      <div style={{ display: 'flex', flexDirection: 'column', gap: '2rem', padding: '2rem' }}>
        Â«FOR c : s.contiene.filter[esVisual]Â»
        <section>
          <Â«c.name.toFirstUpperÂ»Form />
        </section>
        Â«ENDFORÂ»
      </div>
    );
  }

  export default App;
  '''
}

def generateMain(Sistema s){
	'''
	import React from 'react';
	import ReactDOM from 'react-dom/client';
	import App from './App.jsx';
	
	const root = ReactDOM.createRoot(document.getElementById('root'));
	root.render(<App />);

	'''
}

def generateHTML(Sistema s){
	'''
  <!DOCTYPE html>
  <html lang="es">
    <head>
      <meta charset="UTF-8" />
      <meta name="viewport" content="width=device-width, initial-scale=1.0" />
      <title>Â«s.nameÂ»</title>
    </head>
    <body>
      <div id="root"></div>
      <script type="module" src="/main.jsx"></script>
    </body>
  </html>
  '''
}

def generateViteConfig(Sistema s){
  '''
  import { defineConfig } from 'vite';
  import react from '@vitejs/plugin-react';

  // https://vitejs.dev/config/
  export default defineConfig({
    plugins: [react()],
    server: {
      port: 5173,
      open: true
    },
    build: {
      outDir: 'dist',
      sourcemap: true
    }
  });
  '''
}
def generatePackageJsonFrontend() {
  '''
  {
    "name": "metamodel-frontend",
    "version": "1.0.0",
    "description": "Frontend generado automÃ¡ticamente por el metamodelo âœ¨",
    "scripts": {
      "dev": "vite",
      "build": "vite build",
      "preview": "vite preview"
    },
    "dependencies": {
      "react": "^18.2.0",
      "react-dom": "^18.2.0"
    },
    "devDependencies": {
      "@vitejs/plugin-react": "^4.0.0",
      "vite": "^5.0.0"
    }
  }
  '''
}


def generatePackageJsonNest() {
'''
{
  "name": "metamodel-backend",
  "version": "1.0.0",
  "description": "Backend generado automÃ¡ticamente por metamodelo Xtend ðŸ˜Ž",
  "main": "main.ts",
  "scripts": {
    "start": "ts-node main.ts",
    "start:dev": "ts-node-dev --respawn main.ts"
  },
  "dependencies": {
    "@nestjs/common": "^10.0.0",
    "@nestjs/core": "^10.0.0",
    "@nestjs/platform-express": "^10.0.0",
    "@nestjs/typeorm": "^10.0.0",
    "reflect-metadata": "^0.1.13",
    "rxjs": "^7.0.0",
    "sqlite3": "^5.1.6",
    "typeorm": "^0.3.12"
  },
  "devDependencies": {
    "ts-node": "^10.9.1",
    "ts-node-dev": "^2.0.0",
    "typescript": "^5.0.4"
  }
}
'''
}

def generateTsConfigBackend() {
  '''
  {
    "compilerOptions": {
      "module": "commonjs",
      "target": "es2017",
      "strict": true,
      "esModuleInterop": true,
      "experimentalDecorators": true,
      "emitDecoratorMetadata": true,
      "skipLibCheck": true
    }
  }
  '''
}


def generateMainNest(){
	'''
  import { NestFactory } from '@nestjs/core';
  import { AppModule } from './app.module';

  async function bootstrap() {
    const app = await NestFactory.create(AppModule);
    await app.listen(3000);
  }

  bootstrap();
  '''
}

def generateAppModule(Sistema s) {
'''
import { Module } from '@nestjs/common';
import { TypeOrmModule } from '@nestjs/typeorm';

@Module({
  imports: [
    TypeOrmModule.forRoot({
      type: 'sqlite',
      database: 'db.sqlite',
      entities: [__dirname + '/entities/*.entity{.ts,.js}'],
      synchronize: true,
    }),
    Â«FOR c : s.contiene.filter[!esVisual] SEPARATOR ','Â»
    require('./modules/Â«c.nameÂ».module').Â«c.name.toFirstUpperÂ»Module
    Â«ENDFORÂ»
  ],
  controllers: [],
  providers: [],
})
export class AppModule {}
'''
}

def getEntity(Contenedor c) {
'''
import { Entity, Column, PrimaryGeneratedColumn } from 'typeorm';

@Entity()
export class Â«c.name.toFirstUpperÂ» {
  Â«FOR e : c.poseeÂ»
    Â«IF e.isPrimaryÂ»
    @PrimaryGeneratedColumn()
    Â«e.nameÂ»!: Â«getTipoTS(e.tipoDato)Â»;
    Â«ELSEÂ»
    @Column()
    Â«e.nameÂ»!: Â«getTipoTS(e.tipoDato)Â»;
    Â«ENDIFÂ»
  Â«ENDFORÂ»
}
'''
}

def getController(Contenedor contenedor) {
  val className = contenedor.name.toFirstUpper
  val fileName = contenedor.name.toLowerCase

  '''
import { Controller, Get, Post, Body } from '@nestjs/common';
import { Â«classNameÂ»Service } from '../modules/Â«fileNameÂ».service';
import { Â«classNameÂ» } from '../entities/Â«fileNameÂ».entity';

@Controller('Â«fileNameÂ»')
export class Â«classNameÂ»Controller {
  constructor(private readonly service: Â«classNameÂ»Service) {}

  @Post()
  create(@Body() data: Â«classNameÂ») {
    return this.service.create(data);
  }

  @Get()
  findAll() {
    return this.service.findAll();
  }
}
'''
}

def getService(Contenedor c){
  val className = c.name.toFirstUpper
  val fileName = c.name.toLowerCase

  '''
import { Injectable } from '@nestjs/common';
import { Â«classNameÂ» } from '../entities/Â«fileNameÂ».entity';

@Injectable()
export class Â«classNameÂ»Service {

  private data: Â«classNameÂ»[] = [];

  create(createData: Â«classNameÂ») {
    this.data.push(createData);
    return createData;
  }

  findAll() {
    return this.data;
  }

  findOne(id: number) {
    return this.data.find(item => (item as any).id === id);
  }

  update(id: number, updateData: Â«classNameÂ») {
    const index = this.data.findIndex(item => (item as any).id === id);
    if (index !== -1) {
      this.data[index] = { ...this.data[index], ...updateData };
      return this.data[index];
    }
    return null;
  }

  remove(id: number) {
    this.data = this.data.filter(item => (item as any).id !== id);
    return { deleted: true };
  }
}
'''
}

def getModule(Contenedor c){
  val className = c.name.toFirstUpper
  val fileName = c.name.toLowerCase

  '''
import { Module } from '@nestjs/common';
import { TypeOrmModule } from '@nestjs/typeorm';
import { Â«classNameÂ» } from '../entities/Â«fileNameÂ».entity';
import { Â«classNameÂ»Service } from './Â«fileNameÂ».service';
import { Â«classNameÂ»Controller } from '../controllers/Â«fileNameÂ».controller';

@Module({
  imports: [TypeOrmModule.forFeature([Â«classNameÂ»])],
  providers: [Â«classNameÂ»Service],
  controllers: [Â«classNameÂ»Controller],
})
export class Â«classNameÂ»Module {}
'''
}


def getTipoTS(TipoDato tipo) {
	  if (tipo === null) return 'any'
	
	  switch tipo.literal {
	    case 'String': 'string'
	    case 'int': 'number'
	    case 'boolean': 'boolean'
	    case 'double': 'number'
	    default: 'any'
	  }
}
	
	def generateReact(Contenedor c) {
  val name = c.name.toFirstUpper
  val fileName = c.name.toLowerCase

  '''
  import React, { useState } from 'react';
  import './Â«fileNameÂ».css';

  export default function Â«nameÂ»Form() {
    const [formData, setFormData] = useState({
      Â«FOR e : c.posee SEPARATOR ','Â»
      Â«e.nameÂ»: ''
      Â«ENDFORÂ»
    });

    const handleChange = (e) => {
      setFormData({
        ...formData,
        [e.target.name]: e.target.value
      });
    };

    const handleSubmit = (e) => {
      e.preventDefault();
      console.log('Form submitted:', formData);
    };

    return (
      <form className="form-Â«fileNameÂ»" onSubmit={handleSubmit}>
        <h2>Formulario Â«nameÂ»</h2>
        Â«FOR e : c.poseeÂ»
        <div className="form-group">
          <label htmlFor="Â«e.nameÂ»">Â«e.name.toFirstUpperÂ»</label>
          <input
            type="text"
            id="Â«e.nameÂ»"
            name="Â«e.nameÂ»"
            value={formData.Â«e.nameÂ»}
            onChange={handleChange}
            required={Â«e.esObligatorio.toStringÂ»}
          />
        </div>
        Â«ENDFORÂ»

        <button type="submit">Enviar</button>
      </form>
    );
  }
  '''
}
	
def generateCSS(Contenedor c) {
  val fileName = c.name.toLowerCase

  '''
  .form-Â«fileNameÂ» {
    width: 100%;
    max-width: 400px;
    margin: auto;
    padding: 1rem;
    background-color: #fff0f5;
    border-radius: 10px;
    box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
  }

  .form-Â«fileNameÂ» h2 {
    text-align: center;
    margin-bottom: 1rem;
    color: #ff69b4;
  }

  .form-group {
    margin-bottom: 1rem;
  }

  .form-group label {
    display: block;
    font-weight: bold;
    margin-bottom: 0.25rem;
  }

  .form-group input {
    width: 100%;
    padding: 0.5rem;
    border-radius: 5px;
    border: 1px solid #ccc;
  }

  button {
    background-color: #ff69b4;
    color: white;
    padding: 0.5rem 1rem;
    border: none;
    border-radius: 6px;
    cursor: pointer;
    width: 100%;
  }

  button:hover {
    background-color: #ff1493;
  }
  '''
}
	

}
	

