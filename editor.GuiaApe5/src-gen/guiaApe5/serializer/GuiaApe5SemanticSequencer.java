/*
 * generated by Xtext 2.38.0
 */
package guiaApe5.serializer;

import com.google.inject.Inject;
import guiaApe5.Contenedor;
import guiaApe5.Elemento;
import guiaApe5.GuiaApe5Package;
import guiaApe5.Sistema;
import guiaApe5.services.GuiaApe5GrammarAccess;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;

@SuppressWarnings("all")
public class GuiaApe5SemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private GuiaApe5GrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == GuiaApe5Package.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case GuiaApe5Package.CONTENEDOR:
				sequence_Contenedor(context, (Contenedor) semanticObject); 
				return; 
			case GuiaApe5Package.ELEMENTO:
				sequence_Elemento(context, (Elemento) semanticObject); 
				return; 
			case GuiaApe5Package.SISTEMA:
				sequence_Sistema(context, (Sistema) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * <pre>
	 * Contexts:
	 *     Contenedor returns Contenedor
	 *
	 * Constraint:
	 *     (
	 *         name=EString 
	 *         (relaciona+=[Contenedor|EString] relaciona+=[Contenedor|EString]*)? 
	 *         posee+=Elemento 
	 *         posee+=Elemento* 
	 *         main=EBoolean 
	 *         esVisual=EBoolean
	 *     )
	 * </pre>
	 */
	protected void sequence_Contenedor(ISerializationContext context, Contenedor semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Elemento returns Elemento
	 *
	 * Constraint:
	 *     (name=EString longitud=EInt tipoDato=TipoDato? isPrimary=EBoolean esObligatorio=EBoolean)
	 * </pre>
	 */
	protected void sequence_Elemento(ISerializationContext context, Elemento semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Sistema returns Sistema
	 *
	 * Constraint:
	 *     (name=EString contiene+=Contenedor contiene+=Contenedor*)
	 * </pre>
	 */
	protected void sequence_Sistema(ISerializationContext context, Sistema semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
